/* Index used for searching */
/*
   Fields used:
     url, name, type, filename, authors, routine name, comments, parameters,
     categories, and attributes
*/
title = "Documentation for /Users/penton/Dropbox/LASP/";
subtitle = "Generated by IDLdoc";
libdata = new Array();
libdataItem = 0;



libdata[libdataItem++] = new Array("pro/counts_to_irr.html", "counts_to_irr.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "counts_to_irr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/counts_to_irr.html#counts_to_irr", "counts_to_irr", 'routine in <a href="pro/counts_to_irr.html">counts_to_irr.pro</a>', "counts_to_irr.pro", "", "counts_to_irr", "	NAME: COUNTS_TO_IRR  	PURPOSE: Given an array of times, wavelengths, counts, and binsizes, convert from             counts to irradiance.  	USAGE:  IRR=counts_to_irr(times,waves,in_counts,binsize,[time_in_ms=time_in_ms],[wave_in_nm=wave_in_nm],$ 	[debug=debug][,verbose=verbose])  	OPTIONAL PARAMETERS:    VERBOSE   :  Set if reporting of details is desired   DEBUG     :  Set to report additional information useful in debugging. 	OUTPUT: 		Irradiance Array, whose size matches the input waves, in_counts, and binsize   ", "time_in_mswave_in_nmdebugverbosetimeswavesin_countsbinsize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/counts_to_irr.html", "counts_to_irr.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "counts_to_irr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/counts_to_irr.html#counts_to_irr", "counts_to_irr", 'routine in <a href="html/pro/counts_to_irr.html">counts_to_irr.pro</a>', "counts_to_irr.pro", "", "counts_to_irr", "	NAME: COUNTS_TO_IRR  	PURPOSE: Given an array of times, wavelengths, counts, and binsizes, convert from             counts to irradiance.  	USAGE:  IRR=counts_to_irr(times,waves,in_counts,binsize,[time_in_ms=time_in_ms],[wave_in_nm=wave_in_nm],$ 	[debug=debug][,verbose=verbose])  	OPTIONAL PARAMETERS:    VERBOSE   :  Set if reporting of details is desired   DEBUG     :  Set to report additional information useful in debugging. 	OUTPUT: 		Irradiance Array, whose size matches the input waves, in_counts, and binsize   ", "time_in_mswave_in_nmdebugverbosetimeswavesin_countsbinsize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/darkcorr.html", "darkcorr.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "darkcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/darkcorr.html#darkcorr", "darkcorr", 'routine in <a href="pro/darkcorr.html">darkcorr.pro</a>', "darkcorr.pro", "", "darkcorr", " NAME: DARKCORR   PURPOSE: Apply background correction based upon telemetry from Dark orbit   OPTIONAL INPUT PARAMETERS  	VERBOSE :  Set if reporting of details is desired (default=0) 	DEBUG     :  Set to report additional information useful in debugging. 	TIME_IN_SEC : Set if time is input in seconds (default=0)   OPTIONAL OUTPUT PARAMETERS  	BKG 	The Background counts subtracted for the input temp and time   OUTPUT  	Background Subtracted Counts are returned.  +  ", "verbosetime_in_sbkgdebugcountsinttimetemp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/darkcorr.html", "darkcorr.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "darkcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/darkcorr.html#darkcorr", "darkcorr", 'routine in <a href="html/pro/darkcorr.html">darkcorr.pro</a>', "darkcorr.pro", "", "darkcorr", " NAME: DARKCORR   PURPOSE: Apply background correction based upon telemetry from Dark orbit   OPTIONAL INPUT PARAMETERS  	VERBOSE :  Set if reporting of details is desired (default=0) 	DEBUG     :  Set to report additional information useful in debugging. 	TIME_IN_SEC : Set if time is input in seconds (default=0)   OPTIONAL OUTPUT PARAMETERS  	BKG 	The Background counts subtracted for the input temp and time   OUTPUT  	Background Subtracted Counts are returned.  +  ", "verbosetime_in_sbkgdebugcountsinttimetemp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/distcorr.html", "distcorr.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "distcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/distcorr.html#distcorr", "distcorr", 'routine in <a href="html/pro/distcorr.html">distcorr.pro</a>', "distcorr.pro", "", "distcorr", " NAME: DISTCORR   PURPOSE: Apply DISTANCE correction based upon provided factors 		 : There is a big assumption here, that is that the 		   DISTFACTOR = R/R0 ; where R0=1AU           The correction based up a 1/R^2 assumption, or           Corrected Flux = Input Flux * 1.0/(DISTFACTOR)^2   OPTIONAL INPUT PARAMETERS  		VERBOSE :  Set if reporting of details is desired (default=0) 		TIME_IN_S: Set if the time is in seconds instead of ms 		DEBUG     :  Set to report additional information useful in debugging.   OPTIONAL OUTPUT PARAMETERS  	DR 	The DISTANCE shifts are returned separately in this parameter   OUTPUT  	DISTANCE corrected flux (in the passed in units, which could be counts) are returned.  +  ", "verbosetime_in_sdrdebugfluxtime", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/distcorr.html", "distcorr.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "distcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/distcorr.html#distcorr", "distcorr", 'routine in <a href="pro/distcorr.html">distcorr.pro</a>', "distcorr.pro", "", "distcorr", " NAME: DISTCORR   PURPOSE: Apply DISTANCE correction based upon provided factors 		 : There is a big assumption here, that is that the 		   DISTFACTOR = R/R0 ; where R0=1AU           The correction based up a 1/R^2 assumption, or           Corrected Flux = Input Flux * 1.0/(DISTFACTOR)^2   OPTIONAL INPUT PARAMETERS  		VERBOSE :  Set if reporting of details is desired (default=0) 		TIME_IN_S: Set if the time is in seconds instead of ms 		DEBUG     :  Set to report additional information useful in debugging.   OPTIONAL OUTPUT PARAMETERS  	DR 	The DISTANCE shifts are returned separately in this parameter   OUTPUT  	DISTANCE corrected flux (in the passed in units, which could be counts) are returned.  +  ", "verbosetime_in_sdrdebugfluxtime", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/doppcorr.html", "doppcorr.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "doppcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/doppcorr.html#doppcorr", "doppcorr", 'routine in <a href="html/pro/doppcorr.html">doppcorr.pro</a>', "doppcorr.pro", "", "doppcorr", " NAME: DOPPCORR   PURPOSE: Apply Doppler correction based upon provided factors 		 : There is a big assumption here, that is that the 		   DOPPFACTOR = (1.0+V/C)   OPTIONAL INPUT PARAMETERS  		VERBOSE :  Set if reporting of details is desired (default=0) 		WAVE_IN_M : Set if input wavelengths are in meters (default=0).                    If not set, assume they are in nm 		DEBUG     :  Set to report additional information useful in debugging.   OPTIONAL OUTPUT PARAMETERS  	DW 	The Doppler shifts are returned separately in this parameter   OUTPUT  	Doppler corrected wavelengths (in the passed in units) are returned.  +  ", "verbosetime_in_sdwwave_in_mdebugwavetime", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/doppcorr.html", "doppcorr.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "doppcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/doppcorr.html#doppcorr", "doppcorr", 'routine in <a href="pro/doppcorr.html">doppcorr.pro</a>', "doppcorr.pro", "", "doppcorr", " NAME: DOPPCORR   PURPOSE: Apply Doppler correction based upon provided factors 		 : There is a big assumption here, that is that the 		   DOPPFACTOR = (1.0+V/C)   OPTIONAL INPUT PARAMETERS  		VERBOSE :  Set if reporting of details is desired (default=0) 		WAVE_IN_M : Set if input wavelengths are in meters (default=0).                    If not set, assume they are in nm 		DEBUG     :  Set to report additional information useful in debugging.   OPTIONAL OUTPUT PARAMETERS  	DW 	The Doppler shifts are returned separately in this parameter   OUTPUT  	Doppler corrected wavelengths (in the passed in units) are returned.  +  ", "verbosetime_in_sdwwave_in_mdebugwavetime", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/eval_darkcorr.html", "eval_darkcorr.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "eval_darkcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/eval_darkcorr.html#eval_darkcorr", "eval_darkcorr", 'routine in <a href="html/pro/eval_darkcorr.html">eval_darkcorr.pro</a>', "eval_darkcorr.pro", "", "eval_darkcorr", "	NAME: EVAL_DARKCOR  	PURPOSE; One off program to calibrate DARK with Temperature  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/eval_darkcorr.html", "eval_darkcorr.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "eval_darkcorr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/eval_darkcorr.html#eval_darkcorr", "eval_darkcorr", 'routine in <a href="pro/eval_darkcorr.html">eval_darkcorr.pro</a>', "eval_darkcorr.pro", "", "eval_darkcorr", "	NAME: EVAL_DARKCOR  	PURPOSE; One off program to calibrate DARK with Temperature  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/eval_quickscan.html", "eval_quickscan.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "eval_quickscan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/eval_quickscan.html#eval_quickscan", "eval_quickscan", 'routine in <a href="pro/eval_quickscan.html">eval_quickscan.pro</a>', "eval_quickscan.pro", "", "eval_quickscan", " NAME: EVAL_QUICKSCAN   PURPOSE: One off program to evaluate QuickScan data   ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/eval_quickscan.html", "eval_quickscan.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "eval_quickscan.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/eval_quickscan.html#eval_quickscan", "eval_quickscan", 'routine in <a href="html/pro/eval_quickscan.html">eval_quickscan.pro</a>', "eval_quickscan.pro", "", "eval_quickscan", " NAME: EVAL_QUICKSCAN   PURPOSE: One off program to evaluate QuickScan data   ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_bkgcounts_byinttime.html", "get_bkgcounts_byinttime.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_bkgcounts_byinttime.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_bkgcounts_byinttime.html#get_bkgcounts_byinttime", "get_bkgcounts_byinttime", 'routine in <a href="pro/get_bkgcounts_byinttime.html">get_bkgcounts_byinttime.pro</a>', "get_bkgcounts_byinttime.pro", "", "get_bkgcounts_byinttime", "	NAME: get_bkgcounts_byinttime  	PURPOSE: Return temperature dependent background counts 			Integration time is assumed to be in seconds, unless time_in_ms iset  			A simple 3rd order polynomial is assumed for the background vs temp 			relationship. This is stored in the dark_coeff.dat IDL save file that 			is produced by eval_darkcorr.pro  	OPTIONAL PARAMETERS:  	TIME_IN_MS	Set this keyword to indicate that the integration time was passed in                in milli-seconds instead of seconds (default=0)  ", "time_in_msinttimetemp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_bkgcounts_byinttime.html", "get_bkgcounts_byinttime.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_bkgcounts_byinttime.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_bkgcounts_byinttime.html#get_bkgcounts_byinttime", "get_bkgcounts_byinttime", 'routine in <a href="html/pro/get_bkgcounts_byinttime.html">get_bkgcounts_byinttime.pro</a>', "get_bkgcounts_byinttime.pro", "", "get_bkgcounts_byinttime", "	NAME: get_bkgcounts_byinttime  	PURPOSE: Return temperature dependent background counts 			Integration time is assumed to be in seconds, unless time_in_ms iset  			A simple 3rd order polynomial is assumed for the background vs temp 			relationship. This is stored in the dark_coeff.dat IDL save file that 			is produced by eval_darkcorr.pro  	OPTIONAL PARAMETERS:  	TIME_IN_MS	Set this keyword to indicate that the integration time was passed in                in milli-seconds instead of seconds (default=0)  ", "time_in_msinttimetemp", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_c.html", "get_c.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_c.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_c.html#get_c", "get_c", 'routine in <a href="html/pro/get_c.html">get_c.pro</a>', "get_c.pro", "", "get_c", " NAME: GET_C   PURPOSE: Return the speed of light   ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_c.html", "get_c.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_c.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_c.html#get_c", "get_c", 'routine in <a href="pro/get_c.html">get_c.pro</a>', "get_c.pro", "", "get_c", " NAME: GET_C   PURPOSE: Return the speed of light   ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_corr_area.html", "get_corr_area.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_corr_area.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_corr_area.html#get_corr_area", "get_corr_area", 'routine in <a href="html/pro/get_corr_area.html">get_corr_area.pro</a>', "get_corr_area.pro", "", "get_corr_area", "	NAME: get_corr_area  	USAGE: out=get_corr_area()   ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_corr_area.html", "get_corr_area.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_corr_area.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_corr_area.html#get_corr_area", "get_corr_area", 'routine in <a href="pro/get_corr_area.html">get_corr_area.pro</a>', "get_corr_area.pro", "", "get_corr_area", "	NAME: get_corr_area  	USAGE: out=get_corr_area()   ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_default_waveband.html", "get_default_waveband.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_default_waveband.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_default_waveband.html#get_default_waveband", "get_default_waveband", 'routine in <a href="pro/get_default_waveband.html">get_default_waveband.pro</a>', "get_default_waveband.pro", "", "get_default_waveband", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_default_waveband.html", "get_default_waveband.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_default_waveband.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_default_waveband.html#get_default_waveband", "get_default_waveband", 'routine in <a href="html/pro/get_default_waveband.html">get_default_waveband.pro</a>', "get_default_waveband.pro", "", "get_default_waveband", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_detectorTemp.html", "get_detectorTemp.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_detectorTemp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_detectorTemp.html#get_detectorTemp", "get_detectorTemp", 'routine in <a href="pro/get_detectorTemp.html">get_detectorTemp.pro</a>', "get_detectorTemp.pro", "", "get_detectorTemp", "  NAME: get_detectorTemp    USAGE: out=get_detectorTemp([,VERBOSE=verbose],[DEBUG=DEBUG])   INPUT PARAMETERS:    VERBOSE   :  Set if reporting of details is desired   DEBUG     :  Set to report additional information useful in debugging.   OUTPUT PARAMETERS:      Structure of data products:   ", "verbosedebug", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_detectorTemp.html", "get_detectorTemp.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_detectorTemp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_detectorTemp.html#get_detectorTemp", "get_detectorTemp", 'routine in <a href="html/pro/get_detectorTemp.html">get_detectorTemp.pro</a>', "get_detectorTemp.pro", "", "get_detectorTemp", "  NAME: get_detectorTemp    USAGE: out=get_detectorTemp([,VERBOSE=verbose],[DEBUG=DEBUG])   INPUT PARAMETERS:    VERBOSE   :  Set if reporting of details is desired   DEBUG     :  Set to report additional information useful in debugging.   OUTPUT PARAMETERS:      Structure of data products:   ", "verbosedebug", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_detTemp_bytime.html", "get_detTemp_bytime.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_detTemp_bytime.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_detTemp_bytime.html#get_detTemp_bytime", "get_detTemp_bytime", 'routine in <a href="html/pro/get_detTemp_bytime.html">get_detTemp_bytime.pro</a>', "get_detTemp_bytime.pro", "", "get_detTemp_bytime", "	NAME: get_detTemp_bytime,time_ms,use_interpol=use_interpol,verbose=verbose,debug=debug  	PURPOSE:  	USAGE: out=get_detTemp_bytime(time_ms,[USE_interpol=use_interpol][,VERBOSE=verbose] [,DEBUG=DEBUG])   INPUT PARAMETERS:     TIME_MS   : Scalar or Vector of times (in milliseconds)    USE_INTERPOL : Set to use the IDL Interpol function instead of linterp (default=TRUE)    VERBOSE   :  Set if reporting of details is desired    DEBUG     :  Set to report additional information useful in debugging.   OUTPUT PARAMETERS:      Array of temperatures, to match the input time or time_array   ", "use_interpolverbosedebugtime_ms", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_detTemp_bytime.html", "get_detTemp_bytime.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_detTemp_bytime.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_detTemp_bytime.html#get_detTemp_bytime", "get_detTemp_bytime", 'routine in <a href="pro/get_detTemp_bytime.html">get_detTemp_bytime.pro</a>', "get_detTemp_bytime.pro", "", "get_detTemp_bytime", "	NAME: get_detTemp_bytime,time_ms,use_interpol=use_interpol,verbose=verbose,debug=debug  	PURPOSE:  	USAGE: out=get_detTemp_bytime(time_ms,[USE_interpol=use_interpol][,VERBOSE=verbose] [,DEBUG=DEBUG])   INPUT PARAMETERS:     TIME_MS   : Scalar or Vector of times (in milliseconds)    USE_INTERPOL : Set to use the IDL Interpol function instead of linterp (default=TRUE)    VERBOSE   :  Set if reporting of details is desired    DEBUG     :  Set to report additional information useful in debugging.   OUTPUT PARAMETERS:      Array of temperatures, to match the input time or time_array   ", "use_interpolverbosedebugtime_ms", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_distdopp.html", "get_distdopp.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_distdopp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_distdopp.html#get_distdopp", "get_distdopp", 'routine in <a href="html/pro/get_distdopp.html">get_distdopp.pro</a>', "get_distdopp.pro", "", "get_distdopp", "	NAME: get_distdopp  	PURPOSE: Return Distance and Doppler factors from provided resource  	USAGE: 	dd=get_distdopp([VERBOSE=VERBOSE])  	OPTIONAL INPUT PARAMETERS:  		VERBOSE :  Set if reporting of details is desired (default=0)  	OUTPUT: 		A structure with the SunObserverDistanceCorrection and SunObserverDopplerCorrection factors 	are returned with times in seconds and milli-seconds.  Shortened named variables of 	distfactor and doppfactor are also included.   ", "verbose", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_distdopp.html", "get_distdopp.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_distdopp.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_distdopp.html#get_distdopp", "get_distdopp", 'routine in <a href="pro/get_distdopp.html">get_distdopp.pro</a>', "get_distdopp.pro", "", "get_distdopp", "	NAME: get_distdopp  	PURPOSE: Return Distance and Doppler factors from provided resource  	USAGE: 	dd=get_distdopp([VERBOSE=VERBOSE])  	OPTIONAL INPUT PARAMETERS:  		VERBOSE :  Set if reporting of details is desired (default=0)  	OUTPUT: 		A structure with the SunObserverDistanceCorrection and SunObserverDopplerCorrection factors 	are returned with times in seconds and milli-seconds.  Shortened named variables of 	distfactor and doppfactor are also included.   ", "verbose", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_distdopp_bytime.html", "get_distdopp_bytime.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_distdopp_bytime.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_distdopp_bytime.html#get_distdopp_bytime", "get_distdopp_bytime", 'routine in <a href="pro/get_distdopp_bytime.html">get_distdopp_bytime.pro</a>', "get_distdopp_bytime.pro", "", "get_distdopp_bytime", "	NAME: get_distdopp_bytime  	PURPOSE: Return Distance and Doppler factors from provided resource  	USAGE: 	dd=get_distdopp_bytime(time ,[USE_interpol=use_interpol][,TIME_IN_S=time_in_s][VERBOSE=VERBOSE])  	OPTIONAL INPUT PARAMETERS:        TIME_IN_S : Set if input is in seconds, output time will also be in seconds. Default = 0,                    Indicating that input and output time are in milli-seconds.    USE_INTERPOL : Set to use the IDL Interpol function instead of linterp (default=TRUE) 		 VERBOSE :  Set if reporting of details is desired (default=0)  ", "time_in_sverboseuse_interpoldebugtime", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_distdopp_bytime.html", "get_distdopp_bytime.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_distdopp_bytime.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_distdopp_bytime.html#get_distdopp_bytime", "get_distdopp_bytime", 'routine in <a href="html/pro/get_distdopp_bytime.html">get_distdopp_bytime.pro</a>', "get_distdopp_bytime.pro", "", "get_distdopp_bytime", "	NAME: get_distdopp_bytime  	PURPOSE: Return Distance and Doppler factors from provided resource  	USAGE: 	dd=get_distdopp_bytime(time ,[USE_interpol=use_interpol][,TIME_IN_S=time_in_s][VERBOSE=VERBOSE])  	OPTIONAL INPUT PARAMETERS:        TIME_IN_S : Set if input is in seconds, output time will also be in seconds. Default = 0,                    Indicating that input and output time are in milli-seconds.    USE_INTERPOL : Set to use the IDL Interpol function instead of linterp (default=TRUE) 		 VERBOSE :  Set if reporting of details is desired (default=0)  ", "time_in_sverboseuse_interpoldebugtime", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_dn_color.html", "get_dn_color.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_dn_color.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_dn_color.html#get_dn_color", "get_dn_color", 'routine in <a href="html/pro/get_dn_color.html">get_dn_color.pro</a>', "get_dn_color.pro", "", "get_dn_color", " FUNCTION get_dn_color  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_dn_color.html", "get_dn_color.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_dn_color.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_dn_color.html#get_dn_color", "get_dn_color", 'routine in <a href="pro/get_dn_color.html">get_dn_color.pro</a>', "get_dn_color.pro", "", "get_dn_color", " FUNCTION get_dn_color  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_energyperphoton.html", "get_energyperphoton.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_energyperphoton.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_energyperphoton.html#get_energyperphoton", "get_energyperphoton", 'routine in <a href="html/pro/get_energyperphoton.html">get_energyperphoton.pro</a>', "get_energyperphoton.pro", "", "get_energyperphoton", "	NAME: get_energyphoton  	USAGE: Energy=get_energyphoton(wavelength [,WAVE_IN_NM=WAVE_IN_NM])  	PURPOSE: Convert from wavelength to photon energy   INPUT PARAMETERS:     WAVE_IN_NM : Set to if the input wavelength is in NM (default=1)    VERBOSE   :  Set if reporting of details is desired    DEBUG     :  Set to report additional information useful in debugging.   OUTPUT PARAMETERS:  	Photon energy in J  ", "wave_in_nmverbosedebugwave", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_energyperphoton.html", "get_energyperphoton.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_energyperphoton.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_energyperphoton.html#get_energyperphoton", "get_energyperphoton", 'routine in <a href="pro/get_energyperphoton.html">get_energyperphoton.pro</a>', "get_energyperphoton.pro", "", "get_energyperphoton", "	NAME: get_energyphoton  	USAGE: Energy=get_energyphoton(wavelength [,WAVE_IN_NM=WAVE_IN_NM])  	PURPOSE: Convert from wavelength to photon energy   INPUT PARAMETERS:     WAVE_IN_NM : Set to if the input wavelength is in NM (default=1)    VERBOSE   :  Set if reporting of details is desired    DEBUG     :  Set to report additional information useful in debugging.   OUTPUT PARAMETERS:  	Photon energy in J  ", "wave_in_nmverbosedebugwave", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_h.html", "get_h.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_h.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_h.html#get_h", "get_h", 'routine in <a href="pro/get_h.html">get_h.pro</a>', "get_h.pro", "", "get_h", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_h.html", "get_h.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_h.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_h.html#get_h", "get_h", 'routine in <a href="html/pro/get_h.html">get_h.pro</a>', "get_h.pro", "", "get_h", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_instrumentTelemetry.html", "get_instrumentTelemetry.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_instrumentTelemetry.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_instrumentTelemetry.html#get_instrumentTelemetry", "get_instrumentTelemetry", 'routine in <a href="html/pro/get_instrumentTelemetry.html">get_instrumentTelemetry.pro</a>', "get_instrumentTelemetry.pro", "", "get_instrumentTelemetry", "	FUNCTION get_instrumentTelemetry  	PURPOSE: Read the raw telemetry and return as a structure  	USAGE :     out=get_instrumentTelemetry( [,SORT_BYTIME=sort_bytime][,VERBOSE=verbose] [,DEBUG=DEBUG])   INPUT PARAMETERS:     SORT_BYTIME : Set to sort the return structure in increasing time (default=1)    VERBOSE   :  Set if reporting of details is desired    DEBUG     :  Set to report additional information useful in debugging.   OUTPUT PARAMETERS:      Sample Structure of telemetry products:     TIME_S          DOUBLE    Array[41892]    TIME_MS         DOUBLE    Array[41892]    TIME0_MS        DOUBLE       9.4340165e+14    TIME0_S         DOUBLE       9.4340165e+11    GRATPOS         FLOAT     Array[41892]    COUNTS          FLOAT     Array[41892]    TEMPS           FLOAT     Array[41892]   ", "sort_bytimeverbosedebug", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_instrumentTelemetry.html", "get_instrumentTelemetry.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_instrumentTelemetry.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_instrumentTelemetry.html#get_instrumentTelemetry", "get_instrumentTelemetry", 'routine in <a href="pro/get_instrumentTelemetry.html">get_instrumentTelemetry.pro</a>', "get_instrumentTelemetry.pro", "", "get_instrumentTelemetry", "	FUNCTION get_instrumentTelemetry  	PURPOSE: Read the raw telemetry and return as a structure  	USAGE :     out=get_instrumentTelemetry( [,SORT_BYTIME=sort_bytime][,VERBOSE=verbose] [,DEBUG=DEBUG])   INPUT PARAMETERS:     SORT_BYTIME : Set to sort the return structure in increasing time (default=1)    VERBOSE   :  Set if reporting of details is desired    DEBUG     :  Set to report additional information useful in debugging.   OUTPUT PARAMETERS:      Sample Structure of telemetry products:     TIME_S          DOUBLE    Array[41892]    TIME_MS         DOUBLE    Array[41892]    TIME0_MS        DOUBLE       9.4340165e+14    TIME0_S         DOUBLE       9.4340165e+11    GRATPOS         FLOAT     Array[41892]    COUNTS          FLOAT     Array[41892]    TEMPS           FLOAT     Array[41892]   ", "sort_bytimeverbosedebug", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_inttime.html", "get_inttime.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_inttime.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_inttime.html#get_inttime", "get_inttime", 'routine in <a href="pro/get_inttime.html">get_inttime.pro</a>', "get_inttime.pro", "", "get_inttime", "	NAME: get_inttime  	PURPOSE: Returns integration time based upon input elapsed time  	USAGE: out=get_inttime(time[,in_sec=in_sec])  	OPTIONAL INPUT PARAMETERS:  	IN_SEC: Set if output intergration time should be in seconds (default=1)  ", "in_sectime", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_inttime.html", "get_inttime.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_inttime.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_inttime.html#get_inttime", "get_inttime", 'routine in <a href="html/pro/get_inttime.html">get_inttime.pro</a>', "get_inttime.pro", "", "get_inttime", "	NAME: get_inttime  	PURPOSE: Returns integration time based upon input elapsed time  	USAGE: out=get_inttime(time[,in_sec=in_sec])  	OPTIONAL INPUT PARAMETERS:  	IN_SEC: Set if output intergration time should be in seconds (default=1)  ", "in_sectime", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_inttimes.html", "get_inttimes.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_inttimes.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_inttimes.html#get_inttimes", "get_inttimes", 'routine in <a href="pro/get_inttimes.html">get_inttimes.pro</a>', "get_inttimes.pro", "", "get_inttimes", "	NAME:  get_inttimes    USAGE: out=get_inttimes([,VERBOSE=verbose] [,DEBUG=DEBUG])   INPUT PARAMETERS:     TIME_IN_SEC : Set to return the integratian timein seconds instead of milli-seconds (default=0)    VERBOSE   :  Set if reporting of details is desired    DEBUG     :  Set to report additional information useful in debugging.   OUTPUT PARAMETERS:    Integration time (in milli-seconds, unless /TIME_IN_SEC is set )  ", "verbosedebug", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_inttimes.html", "get_inttimes.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_inttimes.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_inttimes.html#get_inttimes", "get_inttimes", 'routine in <a href="html/pro/get_inttimes.html">get_inttimes.pro</a>', "get_inttimes.pro", "", "get_inttimes", "	NAME:  get_inttimes    USAGE: out=get_inttimes([,VERBOSE=verbose] [,DEBUG=DEBUG])   INPUT PARAMETERS:     TIME_IN_SEC : Set to return the integratian timein seconds instead of milli-seconds (default=0)    VERBOSE   :  Set if reporting of details is desired    DEBUG     :  Set to report additional information useful in debugging.   OUTPUT PARAMETERS:    Integration time (in milli-seconds, unless /TIME_IN_SEC is set )  ", "verbosedebug", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_laspdir.html", "get_laspdir.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_laspdir.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_laspdir.html#get_laspdir", "get_laspdir", 'routine in <a href="html/pro/get_laspdir.html">get_laspdir.pro</a>', "get_laspdir.pro", "", "get_laspdir", "	NAME get_laspdir  	PURPOSE: Set the local working directory  	USAGE: dir=get_lampdir([,PNG=PNG][,TXT=TXT])   OUTPUT PARAMETERS:      Local directory of data products  ", "pngtxt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_laspdir.html", "get_laspdir.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_laspdir.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_laspdir.html#get_laspdir", "get_laspdir", 'routine in <a href="pro/get_laspdir.html">get_laspdir.pro</a>', "get_laspdir.pro", "", "get_laspdir", "	NAME get_laspdir  	PURPOSE: Set the local working directory  	USAGE: dir=get_lampdir([,PNG=PNG][,TXT=TXT])   OUTPUT PARAMETERS:      Local directory of data products  ", "pngtxt", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_ph_per_s_cm2_nm.html", "get_ph_per_s_cm2_nm.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_ph_per_s_cm2_nm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_ph_per_s_cm2_nm.html#get_ph_per_s_cm2_nm", "get_ph_per_s_cm2_nm", 'routine in <a href="html/pro/get_ph_per_s_cm2_nm.html">get_ph_per_s_cm2_nm.pro</a>', "get_ph_per_s_cm2_nm.pro", "", "get_ph_per_s_cm2_nm", "  FUNCTION: get_ph_per_s_cm2_nm  ", "areaverbosetimeraw_countsbinsize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_ph_per_s_cm2_nm.html", "get_ph_per_s_cm2_nm.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_ph_per_s_cm2_nm.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_ph_per_s_cm2_nm.html#get_ph_per_s_cm2_nm", "get_ph_per_s_cm2_nm", 'routine in <a href="pro/get_ph_per_s_cm2_nm.html">get_ph_per_s_cm2_nm.pro</a>', "get_ph_per_s_cm2_nm.pro", "", "get_ph_per_s_cm2_nm", "  FUNCTION: get_ph_per_s_cm2_nm  ", "areaverbosetimeraw_countsbinsize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_ref_color.html", "get_ref_color.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_ref_color.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_ref_color.html#get_ref_color", "get_ref_color", 'routine in <a href="pro/get_ref_color.html">get_ref_color.pro</a>', "get_ref_color.pro", "", "get_ref_color", " FUNCTION get_ref_color  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_ref_color.html", "get_ref_color.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_ref_color.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_ref_color.html#get_ref_color", "get_ref_color", 'routine in <a href="html/pro/get_ref_color.html">get_ref_color.pro</a>', "get_ref_color.pro", "", "get_ref_color", " FUNCTION get_ref_color  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_refspec.html", "get_refspec.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_refspec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_refspec.html#get_refspec", "get_refspec", 'routine in <a href="html/pro/get_refspec.html">get_refspec.pro</a>', "get_refspec.pro", "", "get_refspec", "	FUNCTION	get_refspec  	PURPOSE: Read reference spectrum file  	USAGE: ref=get_refspec([DO_PLOT=DO_PLOT][,COLOR=COLOR])  	OPTIONAL INPUT PARAMETERS:  	COLOR: Pass in the reference color for plotting, if the           default reference color from get_ref_color is not appropriate 	DO_PLOT: Set to make a quick plot of the reference spectrum   ", "do_plotcolor", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_refspec.html", "get_refspec.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_refspec.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_refspec.html#get_refspec", "get_refspec", 'routine in <a href="pro/get_refspec.html">get_refspec.pro</a>', "get_refspec.pro", "", "get_refspec", "	FUNCTION	get_refspec  	PURPOSE: Read reference spectrum file  	USAGE: ref=get_refspec([DO_PLOT=DO_PLOT][,COLOR=COLOR])  	OPTIONAL INPUT PARAMETERS:  	COLOR: Pass in the reference color for plotting, if the           default reference color from get_ref_color is not appropriate 	DO_PLOT: Set to make a quick plot of the reference spectrum   ", "do_plotcolor", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_telem.html", "get_telem.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_telem.pro", "", "", "  NAME: get_telem.pro    PURPOSE: Read the ascii telemetry files and return as an IDL structure.   CALLING SEQUENCE:     out=get_telem(TIMES, [,time_in_sec=time_in_sec] [,Edge_Trim=Edge_Trim]             [,VERBOSE=verbose] [,DEBUG=DEBUG] [,DO_PLOT=do_plot],$             [,ADD_DOPPCORR=add_doppcorr][ADD_DISTCORR=add_distcorr])   INPUT PARAMETERS:    TIMES        : A two element array that gives the [START,END] times of the SCAN.                   The times are in milli-seconds unless the TIME_IN_SEC keyword is set.    TIMES_IN_SEC :  Set if the TIMES vector is in seconds instead of milli-seconds.    EDGE_TRIM    : Set to the number of bins at the beginning and end of the scan to                   ignore in the output structure. Default is 2 bins.    SORT_BYGRATPOS : Set to sort the return structure in increasing gratpos (default=0)    SORT_BYWAVELENGTH : Set to sort the return structure in increasing wavelength (default=0)                       Performed after sort_bygratpos.    VERBOSE      :  Set if reporting of details is desired    DEBUG        :  Set to report additional information useful in debugging. 	ADD_DARKCORR :  Set to include BACKGROUND CORRECTION (based on temperature) 	ADD_DOPPCORR :  Set to include DOPPLER CORRECTION 	ADD_DISTCORR :  Set to include DISTANCE CORRECTION   OUTPUT PARAMETERS:      Structure of data products.   EXAMPLE: 		DownScan=[9.434134508500002E14, 9.434178736700002E14] 		DS_telem=get_telem(DownScan,/add_darkcorr,/add_distcor,/add_doppcorr) 		help,DS_telem,/str     START_TIME      FLOAT       9.43413e+14    END_TIME        FLOAT       9.43418e+14    TIMES_MS        DOUBLE    Array[2354]    TIMES_S         DOUBLE    Array[2354]    TIME_MS0        DOUBLE       9.4341346e+14    TIME_S0         DOUBLE       9.4341346e+11    TEMPS           DOUBLE    Array[2354]    GGRATPOS        FLOAT     Array[2354]    GWAVES          DOUBLE    Array[2354]    GCOUNTS         FLOAT     Array[2354]    IRR             DOUBLE    Array[2354]    WAVES           DOUBLE    Array[2354]    COUNTS          DOUBLE    Array[2354]    DELTA_WAVES     DOUBLE    Array[2354]    BINSIZE         DOUBLE        0.0063524922    DOPPCORR        INT              1    DWAVES          DOUBLE    Array[2354]    DW              DOUBLE    Array[2354]    DISTCORR        INT              1    DCOUNTS         DOUBLE    Array[2354]    DR              DOUBLE    Array[2354]    DARKCORR        INT              1    BKGCOUNTS       DOUBLE    Array[2354]    BKG             DOUBLE    Array[2354]    INTTIME_S       FLOAT     Array[2354]    EDGE_TRIM       INT              2  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_telem.html#get_telem", "get_telem", 'routine in <a href="pro/get_telem.html">get_telem.pro</a>', "get_telem.pro", "", "get_telem", "", "time_in_secdebugEdge_Trimverbosedarkdo_plotsort_bywavelengthsort_bygratposadd_doppcorradd_distcorradd_darkcorrtimes", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_telem.html", "get_telem.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_telem.pro", "", "", "  NAME: get_telem.pro    PURPOSE: Read the ascii telemetry files and return as an IDL structure.   CALLING SEQUENCE:     out=get_telem(TIMES, [,time_in_sec=time_in_sec] [,Edge_Trim=Edge_Trim]             [,VERBOSE=verbose] [,DEBUG=DEBUG] [,DO_PLOT=do_plot],$             [,ADD_DOPPCORR=add_doppcorr][ADD_DISTCORR=add_distcorr])   INPUT PARAMETERS:    TIMES        : A two element array that gives the [START,END] times of the SCAN.                   The times are in milli-seconds unless the TIME_IN_SEC keyword is set.    TIMES_IN_SEC :  Set if the TIMES vector is in seconds instead of milli-seconds.    EDGE_TRIM    : Set to the number of bins at the beginning and end of the scan to                   ignore in the output structure. Default is 2 bins.    SORT_BYGRATPOS : Set to sort the return structure in increasing gratpos (default=0)    SORT_BYWAVELENGTH : Set to sort the return structure in increasing wavelength (default=0)                       Performed after sort_bygratpos.    VERBOSE      :  Set if reporting of details is desired    DEBUG        :  Set to report additional information useful in debugging. 	ADD_DARKCORR :  Set to include BACKGROUND CORRECTION (based on temperature) 	ADD_DOPPCORR :  Set to include DOPPLER CORRECTION 	ADD_DISTCORR :  Set to include DISTANCE CORRECTION   OUTPUT PARAMETERS:      Structure of data products.   EXAMPLE: 		DownScan=[9.434134508500002E14, 9.434178736700002E14] 		DS_telem=get_telem(DownScan,/add_darkcorr,/add_distcor,/add_doppcorr) 		help,DS_telem,/str     START_TIME      FLOAT       9.43413e+14    END_TIME        FLOAT       9.43418e+14    TIMES_MS        DOUBLE    Array[2354]    TIMES_S         DOUBLE    Array[2354]    TIME_MS0        DOUBLE       9.4341346e+14    TIME_S0         DOUBLE       9.4341346e+11    TEMPS           DOUBLE    Array[2354]    GGRATPOS        FLOAT     Array[2354]    GWAVES          DOUBLE    Array[2354]    GCOUNTS         FLOAT     Array[2354]    IRR             DOUBLE    Array[2354]    WAVES           DOUBLE    Array[2354]    COUNTS          DOUBLE    Array[2354]    DELTA_WAVES     DOUBLE    Array[2354]    BINSIZE         DOUBLE        0.0063524922    DOPPCORR        INT              1    DWAVES          DOUBLE    Array[2354]    DW              DOUBLE    Array[2354]    DISTCORR        INT              1    DCOUNTS         DOUBLE    Array[2354]    DR              DOUBLE    Array[2354]    DARKCORR        INT              1    BKGCOUNTS       DOUBLE    Array[2354]    BKG             DOUBLE    Array[2354]    INTTIME_S       FLOAT     Array[2354]    EDGE_TRIM       INT              2  ", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_telem.html#get_telem", "get_telem", 'routine in <a href="html/pro/get_telem.html">get_telem.pro</a>', "get_telem.pro", "", "get_telem", "", "time_in_secdebugEdge_Trimverbosedarkdo_plotsort_bywavelengthsort_bygratposadd_doppcorradd_distcorradd_darkcorrtimes", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_time0_ms.html", "get_time0_ms.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_time0_ms.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_time0_ms.html#get_time0_ms", "get_time0_ms", 'routine in <a href="pro/get_time0_ms.html">get_time0_ms.pro</a>', "get_time0_ms.pro", "", "get_time0_ms", " FUNCTION get_time0_ms   PURPOSE: To avoid precision issues, all times are from time0   USAGE: time0_ms=get_time0_ms()  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_time0_ms.html", "get_time0_ms.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_time0_ms.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_time0_ms.html#get_time0_ms", "get_time0_ms", 'routine in <a href="html/pro/get_time0_ms.html">get_time0_ms.pro</a>', "get_time0_ms.pro", "", "get_time0_ms", " FUNCTION get_time0_ms   PURPOSE: To avoid precision issues, all times are from time0   USAGE: time0_ms=get_time0_ms()  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_up_color.html", "get_up_color.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_up_color.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_up_color.html#get_up_color", "get_up_color", 'routine in <a href="pro/get_up_color.html">get_up_color.pro</a>', "get_up_color.pro", "", "get_up_color", " FUNCTION get_up_color  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_up_color.html", "get_up_color.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_up_color.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_up_color.html#get_up_color", "get_up_color", 'routine in <a href="html/pro/get_up_color.html">get_up_color.pro</a>', "get_up_color.pro", "", "get_up_color", " FUNCTION get_up_color  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_wattsperm2.html", "get_wattsperm2.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_wattsperm2.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_wattsperm2.html#get_wattsperm2", "get_wattsperm2", 'routine in <a href="html/pro/get_wattsperm2.html">get_wattsperm2.pro</a>', "get_wattsperm2.pro", "", "get_wattsperm2", "	NAME: get_wattsperm2  	PURPOSE: Convert from counts to Watts/m^2  	USAGE: out=get_wattsperm2(times,waves,counts,binsize)  	OPTIONAL_PARAMETERS:  		TIME_IN_MS : Set if time is in ms (default=1) 		WAVE_IN_NM : Set if wavelengths are in nm (default=1) 		VERBOSE   :  Set if reporting of details is desired 		DEBUG     :  Set to report additional information useful in debugging.      wavelengthInMeters -&gt; convert to meters from nm     h = 6.62606957E-34 [J*s]     c = 299792458.0 [m/s]     energyPerPhoton = h * c / wavelengthInMeters [J]     wattsPerM2 = photonsPerSecondPerArea * 1e2 * 1e2 * energyPerPhoton [watts/m^2/nm]   ", "time_in_mswave_in_nmverbosedebugareatimeswavescountsbinsize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_wattsperm2.html", "get_wattsperm2.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_wattsperm2.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_wattsperm2.html#get_wattsperm2", "get_wattsperm2", 'routine in <a href="pro/get_wattsperm2.html">get_wattsperm2.pro</a>', "get_wattsperm2.pro", "", "get_wattsperm2", "	NAME: get_wattsperm2  	PURPOSE: Convert from counts to Watts/m^2  	USAGE: out=get_wattsperm2(times,waves,counts,binsize)  	OPTIONAL_PARAMETERS:  		TIME_IN_MS : Set if time is in ms (default=1) 		WAVE_IN_NM : Set if wavelengths are in nm (default=1) 		VERBOSE   :  Set if reporting of details is desired 		DEBUG     :  Set to report additional information useful in debugging.      wavelengthInMeters -&gt; convert to meters from nm     h = 6.62606957E-34 [J*s]     c = 299792458.0 [m/s]     energyPerPhoton = h * c / wavelengthInMeters [J]     wattsPerM2 = photonsPerSecondPerArea * 1e2 * 1e2 * energyPerPhoton [watts/m^2/nm]   ", "time_in_mswave_in_nmverbosedebugareatimeswavescountsbinsize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/get_waveband.html", "get_waveband.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "get_waveband.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/get_waveband.html#get_waveband", "get_waveband", 'routine in <a href="pro/get_waveband.html">get_waveband.pro</a>', "get_waveband.pro", "", "get_waveband", "	NAME: get_waveband  	PURPOSE: Set zoomed waveband  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/get_waveband.html", "get_waveband.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "get_waveband.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/get_waveband.html#get_waveband", "get_waveband", 'routine in <a href="html/pro/get_waveband.html">get_waveband.pro</a>', "get_waveband.pro", "", "get_waveband", "	NAME: get_waveband  	PURPOSE: Set zoomed waveband  ", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/gp_to_wave.html", "gp_to_wave.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "gp_to_wave.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/gp_to_wave.html#gp_to_wave", "gp_to_wave", 'routine in <a href="html/pro/gp_to_wave.html">gp_to_wave.pro</a>', "gp_to_wave.pro", "", "gp_to_wave", "	NAME: GP_TO_WAVE  	USAGE: wave=gp_to_wave(gratingpos,[ANG1=ANG1],[,VERBOSE=verbose] [,DEBUG=DEBUG])  	PURPOSE: Given a grating position, return the corresponding wavelength (in nm)  	INPUT PARAMETERS: 		GRATINGPOS = Input Grating Position   	OPTIONAL PARAMETERS:  		ANG1: Return the ANG1 angle, if needed for other purposes 		VERBOSE   :  Set if reporting of details is desired 		DEBUG     :  Set to report additional information useful in debugging.   ", "ang1verbosedebuggratpos", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/gp_to_wave.html", "gp_to_wave.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "gp_to_wave.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/gp_to_wave.html#gp_to_wave", "gp_to_wave", 'routine in <a href="pro/gp_to_wave.html">gp_to_wave.pro</a>', "gp_to_wave.pro", "", "gp_to_wave", "	NAME: GP_TO_WAVE  	USAGE: wave=gp_to_wave(gratingpos,[ANG1=ANG1],[,VERBOSE=verbose] [,DEBUG=DEBUG])  	PURPOSE: Given a grating position, return the corresponding wavelength (in nm)  	INPUT PARAMETERS: 		GRATINGPOS = Input Grating Position   	OPTIONAL PARAMETERS:  		ANG1: Return the ANG1 angle, if needed for other purposes 		VERBOSE   :  Set if reporting of details is desired 		DEBUG     :  Set to report additional information useful in debugging.   ", "ang1verbosedebuggratpos", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/make_plots.html", "make_plots.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "make_plots.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/make_plots.html#make_plots", "make_plots", 'routine in <a href="html/pro/make_plots.html">make_plots.pro</a>', "make_plots.pro", "", "make_plots", "	NAME: make_plots  	USAGE: make_plots,[add_allcorrs=add_allcorrs]  	OPTIONAL INPUT PARAMETERS:  	ADD_ALLCORRS: Set to turn on DIST, DOPP, and DARKCORR (default=0)  ", "add_allcorrs", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/make_plots.html", "make_plots.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "make_plots.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/make_plots.html#make_plots", "make_plots", 'routine in <a href="pro/make_plots.html">make_plots.pro</a>', "make_plots.pro", "", "make_plots", "	NAME: make_plots  	USAGE: make_plots,[add_allcorrs=add_allcorrs]  	OPTIONAL INPUT PARAMETERS:  	ADD_ALLCORRS: Set to turn on DIST, DOPP, and DARKCORR (default=0)  ", "add_allcorrsverbose", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/nm_to_m.html", "nm_to_m.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "nm_to_m.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/nm_to_m.html#nm_to_m", "nm_to_m", 'routine in <a href="pro/nm_to_m.html">nm_to_m.pro</a>', "nm_to_m.pro", "", "nm_to_m", "	NAME: nm_to_m  	PURPOSE: Simple nm to meter conversion  ", "nm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/nm_to_m.html", "nm_to_m.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "nm_to_m.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/nm_to_m.html#nm_to_m", "nm_to_m", 'routine in <a href="html/pro/nm_to_m.html">nm_to_m.pro</a>', "nm_to_m.pro", "", "nm_to_m", "	NAME: nm_to_m  	PURPOSE: Simple nm to meter conversion  ", "nm", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/plans.html", "plans.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "plans.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/plans.html#plans", "plans", 'routine in <a href="pro/plans.html">plans.pro</a>', "plans.pro", "", "plans", "	NAME: PLANS  	PURPOSE: Sandbox to test analysis code and results  ***** Background: This data is similar to what the SORCE SOLSTICE instrument has available (though it is a small subset of the wavelength range). This specific data set is a simulation around the Si 2 emission lines (~180nm).  SOLSTICE collects data by looking at the sun. Light enters the aperture, follows the optical path which includes a grating, then lands on a photomultiplier tube (pmt) which counts the number of photon events. The position of the grating can be changed, which changes the wavelength of light hitting the pmt, which allows for the measurement of the solar spectrum.  The SORCE spacecraft is in an orbit with roughly a ninety minute period. Unfortunately the spacecraft batteries are going bad. It cannot maintain the power required to keep the instrument at it's ideal temperature (22 deg C) and so the heaters are turned off during eclipse. This has created significant temperature swings. Another unfortunate side effect is that the grating position is reset with each orbit and it never returns to the exact fiducial. This creates a small grating offset from orbit to orbit which effects the actual grating position from what is being reported.  From orbit to orbit, the spacecraft will execute different experiments, to measure different effects. The included data covers about five orbits worth of data, with different experiments on each orbit.  Over this time period, it is reasonable to assume the solar variability for this wavelength range is not measureable by this detector.  ***** Task: Please calculate the irradiance in watts/m^2 and compare the scan data. Provide plots of your results along with your code. Specifically, plot the region around the two emission lines at ~180nm. Also, calculate the ratio of each scan wrt the reference spectrum and plot the results. What are your thoughts? Use any language you are comfortable with.   From plans.txt: planName, startTime, endTime   Orbit 1 =	QuickScan, 9.434017775100002E14, 9.434062192200002E14  Orbit 2 =	ConstantWavelength, 9.434076142300002E14, 9.434120464800002E14  Orbit 3 =	DownScan, 9.434134508500002E14, 9.434178736700002E14  Orbit 4 =	Dark, 9.434192873600002E14, 9.434237008000002E14  Orbit 5 =	UpScan, 9.434251237500002E14, 9.434295278700002E14   1) Why is there a  down spectrum  during the CW portion ? 	Blake reports this scan is fine to use  ***** Equations   * Wavelength (the grating equation) :     offset = 239532.38     stepSize = 2.4237772022101214E-6 [rad]     d = 277.77777777777777 [nm]     phiGInRads = 0.08503244115716374 [rad]     ang1 = (offset - gratingPosition) * stepSize     wavelength = 2 * d * sin(ang1) * cos(phiGInRads / 2.0) [nm]   * counts/second/area :     integrationTime -&gt; convert to seconds from ms     cr = counts / integrationTime [counts / sec / nm] (the per nm is from the sampling at the specific grating position)     apArea = .01 [cm^2] (aperture area)     photonspersecPerCm2 = cr / apArea [photons/sec/cm^2/nm]   * watts/meter^2     wavelengthInMeters -&gt; convert to meters from nm     h = 6.62606957E-34 [J*s]     c = 299792458.0 [m/s]     energyPerPhoton = h * c / wavelengthInMeters [J]     wattsPerM2 = photonspersecPerArea * 1e2 * 1e2 * energyPerPhoton [watts/m^2/nm]  ***** Files All files are comma separated with a one line header.    * detectorTemp.txt : in degrees Celsius. It is roughly sampled at 1 second.   * distanceAndDoppler.txt : These are the corrections used to adjust for the changing     distance and velocity of the spacecraft relative to the sun.   * instrumentTelemetry.txt : Includes grating position and measured detector counts. It is sampled     proportional to the current integration time. (keep in mind that this is measured counts which     which could be dependent on other variables)   * integrationTime.txt : This is the current set integration time (ms) of the instrument.     Assume the value is constant until there is a new value.   * plans.txt : This file includes the experiment names with start/end times. You can find the     time ranges of the plans of interest her. [start, end)   * referenceSpectrum.txt : This is a reference spectrum with accurate wavelengths. The current     irradiance measurements will be within 15% of this spectrum.   w = 182nm = 1.85E-7m   Plan:   Read in the intrumentTelementry for a given time range and return the graPos & counts  ", "plot_countsplot_gratposplot_wavesopverboseplot_tempsmake_finalplot_allplot_irr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/plans.html", "plans.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "plans.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/plans.html#plans", "plans", 'routine in <a href="html/pro/plans.html">plans.pro</a>', "plans.pro", "", "plans", "	NAME: PLANS  	PURPOSE: Sandbox to test analysis code and results  ***** Background: This data is similar to what the SORCE SOLSTICE instrument has available (though it is a small subset of the wavelength range). This specific data set is a simulation around the Si 2 emission lines (~180nm).  SOLSTICE collects data by looking at the sun. Light enters the aperture, follows the optical path which includes a grating, then lands on a photomultiplier tube (pmt) which counts the number of photon events. The position of the grating can be changed, which changes the wavelength of light hitting the pmt, which allows for the measurement of the solar spectrum.  The SORCE spacecraft is in an orbit with roughly a ninety minute period. Unfortunately the spacecraft batteries are going bad. It cannot maintain the power required to keep the instrument at it's ideal temperature (22 deg C) and so the heaters are turned off during eclipse. This has created significant temperature swings. Another unfortunate side effect is that the grating position is reset with each orbit and it never returns to the exact fiducial. This creates a small grating offset from orbit to orbit which effects the actual grating position from what is being reported.  From orbit to orbit, the spacecraft will execute different experiments, to measure different effects. The included data covers about five orbits worth of data, with different experiments on each orbit.  Over this time period, it is reasonable to assume the solar variability for this wavelength range is not measureable by this detector.  ***** Task: Please calculate the irradiance in watts/m^2 and compare the scan data. Provide plots of your results along with your code. Specifically, plot the region around the two emission lines at ~180nm. Also, calculate the ratio of each scan wrt the reference spectrum and plot the results. What are your thoughts? Use any language you are comfortable with.   From plans.txt: planName, startTime, endTime   Orbit 1 =	QuickScan, 9.434017775100002E14, 9.434062192200002E14  Orbit 2 =	ConstantWavelength, 9.434076142300002E14, 9.434120464800002E14  Orbit 3 =	DownScan, 9.434134508500002E14, 9.434178736700002E14  Orbit 4 =	Dark, 9.434192873600002E14, 9.434237008000002E14  Orbit 5 =	UpScan, 9.434251237500002E14, 9.434295278700002E14   1) Why is there a  down spectrum  during the CW portion ? 	Blake reports this scan is fine to use  ***** Equations   * Wavelength (the grating equation) :     offset = 239532.38     stepSize = 2.4237772022101214E-6 [rad]     d = 277.77777777777777 [nm]     phiGInRads = 0.08503244115716374 [rad]     ang1 = (offset - gratingPosition) * stepSize     wavelength = 2 * d * sin(ang1) * cos(phiGInRads / 2.0) [nm]   * counts/second/area :     integrationTime -&gt; convert to seconds from ms     cr = counts / integrationTime [counts / sec / nm] (the per nm is from the sampling at the specific grating position)     apArea = .01 [cm^2] (aperture area)     photonspersecPerCm2 = cr / apArea [photons/sec/cm^2/nm]   * watts/meter^2     wavelengthInMeters -&gt; convert to meters from nm     h = 6.62606957E-34 [J*s]     c = 299792458.0 [m/s]     energyPerPhoton = h * c / wavelengthInMeters [J]     wattsPerM2 = photonspersecPerArea * 1e2 * 1e2 * energyPerPhoton [watts/m^2/nm]  ***** Files All files are comma separated with a one line header.    * detectorTemp.txt : in degrees Celsius. It is roughly sampled at 1 second.   * distanceAndDoppler.txt : These are the corrections used to adjust for the changing     distance and velocity of the spacecraft relative to the sun.   * instrumentTelemetry.txt : Includes grating position and measured detector counts. It is sampled     proportional to the current integration time. (keep in mind that this is measured counts which     which could be dependent on other variables)   * integrationTime.txt : This is the current set integration time (ms) of the instrument.     Assume the value is constant until there is a new value.   * plans.txt : This file includes the experiment names with start/end times. You can find the     time ranges of the plans of interest her. [start, end)   * referenceSpectrum.txt : This is a reference spectrum with accurate wavelengths. The current     irradiance measurements will be within 15% of this spectrum.   w = 182nm = 1.85E-7m   Plan:   Read in the intrumentTelementry for a given time range and return the graPos & counts  ", "plot_countsplot_gratposplot_wavesopverboseplot_tempsmake_finalplot_allplot_irr", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/raw_counts_to_cps.html", "raw_counts_to_cps.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "raw_counts_to_cps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/raw_counts_to_cps.html#raw_counts_to_cps", "raw_counts_to_cps", 'routine in <a href="html/pro/raw_counts_to_cps.html">raw_counts_to_cps.pro</a>', "raw_counts_to_cps.pro", "", "raw_counts_to_cps", "  NAME: raw_counts_to_cps   PURPOSE: Used in COUNTS_TO_IRR to convert from counts to irradiance. This           routine determines the integration time and binsize and adjusts the           counts array appropriately.   USAGE: out=raw_counts_to_cps(raw_counts,time,binsize)   OPTIONAL INPUT KEYWORDS:     VERBOSE   :  Set if reporting of details is desired  ", "verboseraw_countstimebinsize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/raw_counts_to_cps.html", "raw_counts_to_cps.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "raw_counts_to_cps.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/raw_counts_to_cps.html#raw_counts_to_cps", "raw_counts_to_cps", 'routine in <a href="pro/raw_counts_to_cps.html">raw_counts_to_cps.pro</a>', "raw_counts_to_cps.pro", "", "raw_counts_to_cps", "  NAME: raw_counts_to_cps   PURPOSE: Used in COUNTS_TO_IRR to convert from counts to irradiance. This           routine determines the integration time and binsize and adjusts the           counts array appropriately.   USAGE: out=raw_counts_to_cps(raw_counts,time,binsize)   OPTIONAL INPUT KEYWORDS:     VERBOSE   :  Set if reporting of details is desired  ", "verboseraw_countstimebinsize", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/string1f.html", "string1f.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "string1f.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/string1f.html#string1f", "string1f", 'routine in <a href="pro/string1f.html">string1f.pro</a>', "string1f.pro", "", "string1f", "	NAME: string1f  	PURPOSE: Simple float to string routine  ", "formatf", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/string1f.html", "string1f.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "string1f.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/string1f.html#string1f", "string1f", 'routine in <a href="html/pro/string1f.html">string1f.pro</a>', "string1f.pro", "", "string1f", "	NAME: string1f  	PURPOSE: Simple float to string routine  ", "formatf", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/string1i.html", "string1i.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "string1i.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/string1i.html#string1i", "string1i", 'routine in <a href="html/pro/string1i.html">string1i.pro</a>', "string1i.pro", "", "string1i", "	NAME: string1i  	PURPOSE: Simple int to string routine  ", "formatroundfixf", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/string1i.html", "string1i.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "string1i.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/string1i.html#string1i", "string1i", 'routine in <a href="pro/string1i.html">string1i.pro</a>', "string1i.pro", "", "string1i", "	NAME: string1i  	PURPOSE: Simple int to string routine  ", "formatroundfixf", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/test/test_counts_to_irr.html", "test_counts_to_irr.pro", '.pro file in <a href="pro/test/dir-overview.html">pro/test/ directory</a>', "test_counts_to_irr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/test/test_counts_to_irr.html#test_counts_to_irr", "test_counts_to_irr", 'routine in <a href="pro/test/test_counts_to_irr.html">test_counts_to_irr.pro</a>', "test_counts_to_irr.pro", "", "test_counts_to_irr", "", "epochtimedebugverbose", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/test/test_counts_to_irr.html", "test_counts_to_irr.pro", '.pro file in <a href="html/pro/test/dir-overview.html">html/pro/test/ directory</a>', "test_counts_to_irr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/test/test_counts_to_irr.html#test_counts_to_irr", "test_counts_to_irr", 'routine in <a href="html/pro/test/test_counts_to_irr.html">test_counts_to_irr.pro</a>', "test_counts_to_irr.pro", "", "test_counts_to_irr", "", "epochtimedebugverbose", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/test/test_energyphoton.html", "test_energyphoton.pro", '.pro file in <a href="html/pro/test/dir-overview.html">html/pro/test/ directory</a>', "test_energyphoton.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/test/test_energyphoton.html#test_energyphoton", "test_energyphoton", 'routine in <a href="html/pro/test/test_energyphoton.html">test_energyphoton.pro</a>', "test_energyphoton.pro", "", "test_energyphoton", "	Function test_energyphoton  ", "verbose", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/test/test_energyphoton.html", "test_energyphoton.pro", '.pro file in <a href="pro/test/dir-overview.html">pro/test/ directory</a>', "test_energyphoton.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/test/test_energyphoton.html#test_energyphoton", "test_energyphoton", 'routine in <a href="pro/test/test_energyphoton.html">test_energyphoton.pro</a>', "test_energyphoton.pro", "", "test_energyphoton", "	Function test_energyphoton  ", "verbose", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/test/test_irr.html", "test_irr.pro", '.pro file in <a href="html/pro/test/dir-overview.html">html/pro/test/ directory</a>', "test_irr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/test/test_irr.html#test_irr", "test_irr", 'routine in <a href="html/pro/test/test_irr.html">test_irr.pro</a>', "test_irr.pro", "", "test_irr", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/test/test_irr.html", "test_irr.pro", '.pro file in <a href="pro/test/dir-overview.html">pro/test/ directory</a>', "test_irr.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/test/test_irr.html#test_irr", "test_irr", 'routine in <a href="pro/test/test_irr.html">test_irr.pro</a>', "test_irr.pro", "", "test_irr", "", "", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/v_to_wave.html", "v_to_wave.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "v_to_wave.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/v_to_wave.html#v_to_wave", "v_to_wave", 'routine in <a href="html/pro/v_to_wave.html">v_to_wave.pro</a>', "v_to_wave.pro", "", "v_to_wave", "", "just_czrestdoublev", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/v_to_wave.html", "v_to_wave.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "v_to_wave.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/v_to_wave.html#v_to_wave", "v_to_wave", 'routine in <a href="pro/v_to_wave.html">v_to_wave.pro</a>', "v_to_wave.pro", "", "v_to_wave", "", "just_czrestdoublev", "          -1", "");
  
  

libdata[libdataItem++] = new Array("pro/v_to_z.html", "v_to_z.pro", '.pro file in <a href="pro/dir-overview.html">pro/ directory</a>', "v_to_z.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("pro/v_to_z.html#v_to_z", "v_to_z", 'routine in <a href="pro/v_to_z.html">v_to_z.pro</a>', "v_to_z.pro", "", "v_to_z", "", "just_czdoublev", "          -1", "");
  
  

libdata[libdataItem++] = new Array("html/pro/v_to_z.html", "v_to_z.pro", '.pro file in <a href="html/pro/dir-overview.html">html/pro/ directory</a>', "v_to_z.pro", "", "", "", "", "          -1", "");
  
  
  libdata[libdataItem++] = new Array("html/pro/v_to_z.html#v_to_z", "v_to_z", 'routine in <a href="html/pro/v_to_z.html">v_to_z.pro</a>', "v_to_z.pro", "", "v_to_z", "", "just_czdoublev", "          -1", "");
  
  

